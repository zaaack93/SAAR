import {
  ProductGalleryNavigation,
  BuyButtons,
} from "{{ 'theme.js' | asset_url }}"; // Import the theme web component
// Define your custom element class
class WrappingContainer extends HTMLElement {
  constructor() {
    super();
  }

  connectedCallback() {
    // Create a MutationObserver to watch for changes in the container's content
    const observer = new MutationObserver((mutationsList) => {
      for (const mutation of mutationsList) {
        if (
          mutation.type === "childList" &&
          this.containsYourContent(mutation.target)
        ) {
          // Your content is now available, execute your logic
          this.loadThirdPartyApp();
          observer.disconnect(); // Stop observing once your content is inserted
        }
      }
    });

    // Start observing the container for changes
    observer.observe(this, { childList: true, subtree: true });
  }

  containsYourContent(element) {
    // Implement a function to check if your content is available in the element
    // You can use a specific attribute or element structure to identify it.
    // Return true when your content is found.
    return element.querySelector(".ptw-app-wrapper") !== null;
  }

  loadThirdPartyApp() {
    // Implement your logic to interact with the third-party app here
    // This function will be called when your content is available

    const noteContainer = this.querySelector(".ptw-message-note");
    const newDiv = document.createElement("div");
    newDiv.classList.add("note-label");

    const labelElement = document.querySelector('label[for="ptw-gift-needed"]');

    // Create a new text node with the label's text content
    const labelText = labelElement.cloneNode(true);
    labelText.querySelector("span").remove();
    newDiv.innerHTML = "Add gift wrapping and a personal note";
    noteContainer.prepend(newDiv);

    // Get the label element by the 'for' attribute
    const labelElement1 = document.querySelector(
      'label[for="ptw-gift-needed"]'
    );
    const ptwPrice = labelElement1.querySelector(".ptw-price");
    ptwPrice.textContent = ptwPrice.textContent.replace(/[\(\)\s]/g, "");

    // Update the text content of the label
    labelElement1.textContent = "Custom Gift Packing";

    const newDivPrice = document.createElement("div");
    newDivPrice.classList.add("ptw-price");
    newDivPrice.innerHTML = ptwPrice.textContent;
    labelElement1.prepend(newDivPrice);

    let linkElement = document.querySelector('link[href*="wrapin.css"]');

    // Check if the <link> element exists
    if (linkElement) {
      // Remove the <link> element from the DOM
      linkElement.parentNode.removeChild(linkElement);
    }

    //trigger refressh scroll slider
    const event = new CustomEvent("slider-scroll:refresh", {
      bubbles: true, // Allows the event to bubble up the DOM
    });

    // Dispatch the custom event
    this.dispatchEvent(event);
  }
}

// Define your custom element using the customElements API
customElements.define("wraping-container", WrappingContainer);

// this wraper is for waiting the zepto personalizer to initiate
class FormWrappingContainer extends HTMLElement {
  constructor() {
    super();
  }

  connectedCallback() {
    const observerCallback = (mutationsList, observer) => {
      for (const mutation of mutationsList) {
        if (
          mutation.type === "childList" &&
          this.containsYourContent(mutation.target)
        ) {
          // Your content is now available, execute your logic
          this.loadThirdPartyApp();
          // Stop observing once your content is inserted
          observer.disconnect();
        }
      }
    };

    // Create a MutationObserver with a callback that can reference the observer itself
    const observer = new MutationObserver((mutationsList) =>
      observerCallback(mutationsList, observer)
    );

    // Start observing the container for changes
    observer.observe(this, { childList: true, subtree: true });
  }

  containsYourContent(element) {
    // Implement a function to check if your content is available in the element
    // You can use a specific attribute or element structure to identify it.
    // Return true when your content is found.
        return element.querySelector(".product-personalizer") !== null;
  }

  loadThirdPartyApp() {
    setTimeout(() => {
      //this for wrappe it inside a tag
      if (!this.querySelector("product-personalizer-wrapper")) {
        // Step 1: Select the div element with the "product-personalizer" class
        let divElement = this.querySelector(".product-personalizer");
        if (divElement) {
          // Create a new <wrapper> element
          let wrapperElement = document.createElement(
            "product-personalizer-wrapper"
          );
          //hide the personalizer until we do all the stuff
          //wrapperElement.style.display = "none";
          // Clone the <legend> element
          let clonedLegend = divElement.cloneNode(true);

          // Append the cloned <legend> element to the <wrapper> element
          wrapperElement.appendChild(clonedLegend);

          // Replace the <legend> element with the <wrapper> element in the DOM
          divElement.parentNode.replaceChild(wrapperElement, divElement);

          // Select the .product_customizar_options <div>
          var productOptionsDiv = document.querySelector(
            ".product_customizar_options"
          );

          if (productOptionsDiv) {
            // Prepend the new element to the beginning of the .product_customizar_options <div>
            productOptionsDiv.insertBefore(
              this.querySelector("product-personalizer-wrapper"),
              productOptionsDiv.firstChild
            );
          }
        }
      }
    }, 300);
  }
}

// Define your custom element using the customElements API
customElements.define("form-wrapping-container", FormWrappingContainer);

//zepto personalizer web component
class ProductPersonalizerWrapper extends HTMLElement {
  constructor() {
    super();
    // Find elements within the shadow DOM
    this.updatePriceLineCustomizer();
  }

  updatePriceLineCustomizer() {
    setTimeout(() => {
      const dateMainF = this.querySelector('.pplr-wrapper[data-main="1"]');
      if (dateMainF) {
        const customizationPrice = dateMainF.querySelector(
          ".pplrcheckbox.pplraddprice"
        );
        const newSpanPrice = dateMainF.querySelector(".pplrlabel .pplr_option_price_span");
        newSpanPrice.classList.add("pplr_option_price_span");

        if (customizationPrice == null) {
          newSpanPrice.innerHTML = "Free";
        } else {
          newSpanPrice.innerHTML = `$${customizationPrice.dataset.pplr_price}`;
        }
      }

      //wrapp alll the query selector and wrappe theme inside a div
      // Create a new div element to be the wrapper
      let wrapper = document.createElement("div");
      wrapper.classList.add("mains-wrapper");

      // Get all the .pplr-wrapper divs
      const allWrapper = this.querySelectorAll(".pplr-wrapper");

      allWrapper.forEach((wrapperDiv) => {
        if (wrapperDiv.getAttribute("data-main") != "1") {
          // Clone the div that meets the condition and append it to the wrapper
          let cloneDiv = wrapperDiv.cloneNode(true);
          if (wrapperDiv.classList.contains("pplr-text")) {
            const labelPlacement = cloneDiv.querySelector(".pplrlabel");
            if (labelPlacement.textContent.trim() != "") {
              labelPlacement.classList.add("label-with-check");
              // const newCheckBox = document.createElement("input");
              // newCheckBox.type = "checkbox";
              // newCheckBox.setAttribute('required',true);
              // labelPlacement.prepend(newCheckBox);
            } else {
              if (cloneDiv.querySelector(".oindexlabel"))
                cloneDiv.querySelector(
                  'input[type="text"]'
                ).name = `properties[${
                  cloneDiv.querySelector(".oindexlabel").textContent
                }]`;
            }
            // Get all the span elements inside the key_layout div
            const spanElements = cloneDiv.querySelectorAll(".key_layout span");

            // Add a click event listener to each span
            spanElements.forEach((span) => {
              span.addEventListener("click", () => {
                // Hide the parent key_layout div when a span is clicked
                cloneDiv.querySelector(".key_layout").style.display = "none";
                cloneDiv.querySelector(".key_layout").style.visibility =
                  "hidden";
              });
            });

            //
            cloneDiv
              .querySelector(".key_layout_sub")
              .addEventListener("click", (e) => {
                cloneDiv.querySelector(".key_layout").style.visibility =
                  "visible";
              });
            cloneDiv
              .querySelector('input[type="text"]')
              .addEventListener("input", (e) => {
                setTimeout(() => {
                  cloneDiv.querySelector(
                    ".pplr-character-count .ct"
                  ).textContent = e.target.value.length;
                }, 300);
              });
            cloneDiv.querySelector(".pplr-character-count .ct").textContent =
              cloneDiv.querySelector('input[type="text"]').value.length;
          }
          wrapper.appendChild(cloneDiv);
          wrapperDiv.replaceWith(wrapper);
        }
      });
// set the image visible if there's an image to show
      const img = this.querySelector(".pplr_image_loader img");
      // Add event listener for the image load
      img?.addEventListener("load", () => {
        if(!img.src.includes('blank.png')) {
          const loaderDiv = this.querySelector(".pplr_image_loader");
          loaderDiv.style.display = "initial"; // Make the loader visible
        }
      });
      this.style.display = "initial";
      this.classList.add('ready-custom')
      //trigger click opn the first item

      const label = this.querySelector('.pplr-wrapper[data-main="1"] .pplrlabel')
      if(label){
        label.click()
        label.click()
      }
      //trigger refressh scroll slider
      const event = new CustomEvent("slider-scroll:refresh", {
        bubbles: true, // Allows the event to bubble up the DOM
      });

      // Dispatch the custom event
      this.dispatchEvent(event);
    }, 300);
  }
}
customElements.define(
  "product-personalizer-wrapper",
  ProductPersonalizerWrapper
);

// scroll slider container

class ScrollContainer extends HTMLElement {
  constructor() {
    super();
  }

  connectedCallback() {
    const container = this.querySelector(".inner_container_items");
    const leftButton = this.querySelector(".left-button");
    const rightButton = this.querySelector(".right-button");

    // Add a 'slide-directly-edge' attribute and check its value
    const slideDirectlyEdge = this.hasAttribute("slide-directly-edge");

    const updateButtonVisibility = () => {
      // Show/hide the left button based on scroll position
      if (container.scrollLeft > 0 && leftButton) {
        leftButton.style.visibility = "visible";
      } else if (leftButton) {
        leftButton.style.visibility = "hidden";
      }
      // Show/hide the right button based on scroll position
      if (
        container.scrollLeft <
          container.scrollWidth - container.clientWidth - 10 &&
        rightButton
      ) {
        rightButton.style.visibility = "visible";
      } else if (rightButton) {
        rightButton.style.visibility = "hidden";
      }
    };

    const scrollHandler = () => {
      updateButtonVisibility();
    };

    const resizeHandler = () => {
      updateButtonVisibility();
    };

    leftButton?.addEventListener("click", () => {
      if (slideDirectlyEdge) {
        container.scrollLeft = 0; // Scroll to the left edge
      } else {
        container.scrollLeft -= 300; // Normal scrolling
      }
    });

    rightButton?.addEventListener("click", () => {
      if (slideDirectlyEdge) {
        container.scrollLeft = container.scrollWidth - container.clientWidth; // Scroll to the right edge
      } else {
        container.scrollLeft += 300; // Normal scrolling
      }
    });

    container?.addEventListener("scroll", scrollHandler);
    window.addEventListener("resize", resizeHandler);

    updateButtonVisibility(); // Trigger initial visibility check

    // Add an event listener for the refresh scroll
    this.addEventListener("slider-scroll:refresh", updateButtonVisibility);
  }
}

customElements.define("scroll-wrapper-slider", ScrollContainer);

class horizontalProductCard extends HTMLElement {
  constructor() {
    super();
  }

  connectedCallback() {
    const questionButton = this.querySelector(".question-icon");
    const removeButton = this.querySelector(".remove-icon");

    questionButton?.addEventListener("click", () => {
      this.classList.add("expanded-area-button");
    });

    removeButton?.addEventListener("click", () => {
      this.classList.remove("expanded-area-button");
    });
  }
}

customElements.define("horizontal-product-card", horizontalProductCard);

class SwiperComponent extends HTMLElement {
  constructor() {
    super();
  }

  connectedCallback() {
    this.initSwiper();
  }

  initSwiper() {
    // Retrieve options from data attributes
    const loop = this.getAttribute("data-loop") === "true";
    const autoplay = parseInt(this.getAttribute("data-autoplay")) || false;

    // Configure Swiper with the retrieved options
    const swiperOptions = {
      slidesPerView: 1.2,
      centeredSlides: true,
      spaceBetween: 20,
      grabCursor: true,
      loop: true,
      autoHeight: true,
      pagination: {
        el: ".swiper-pagination",
        clickable: true,
      },
      breakpoints: {
        640: {
          slidesPerView: 2,
        },
        768: {
          slidesPerView: 3,
        },
        1024: {
          centeredSlides: false,
          slidesPerView: 3.5,
        },
        1320: {
          centeredSlides: false,
          slidesPerView: 4.5,
        },
        1600: {
          centeredSlides: false,
          slidesPerView: 5,
        },
        1900: {
          centeredSlides: false,
          slidesPerView: 6.5,
        },
      },
    };

    const mySwiper = new Swiper(this, swiperOptions);
    this.classList.add("ready-slider");
  }
}

customElements.define("swiper-component", SwiperComponent);

// Extend it
class ProductGalleryScroller extends ProductGalleryNavigation {
  constructor() {
    super();
  }

  connectedCallback() {
    super.connectedCallback();

    if (window.innerWidth > 999) {
      this.observeContainerAndMeasureHeight();
      this.scrollEffect();
    }
    window.addEventListener("resize", () => {
      if (window.innerWidth > 999) {
        const container = document.querySelector(
          ".product-gallery__media.is-initial"
        );
        const containerHeight = container.getBoundingClientRect().height;
        this.style.maxHeight = `${containerHeight}px`;
      }
    });
  }

  scrollEffect() {
    this.addEventListener("scroll", () => {
      this.scrollCalculator();
    });
    this.scrollCalculator();
  }

  scrollCalculator() {
    const scrollTop = this.scrollTop;
    const scroller = document.querySelector(".product-gallery__thumbnail-list");
    const scrollHeight = this.scrollHeight;
    const clientHeight = this.clientHeight;
    // Calculate the available space for scrolling
    const availableScrollSpace = scrollHeight - clientHeight;
    // Show/hide top shadow when at the bottom
    if (scrollTop > 10 && availableScrollSpace > 0) {
      scroller.classList.add("at-top");
    } else {
      scroller.classList.remove("at-top");
    }

    // Show/hide bottom shadow when there's enough space to scroll
    if (availableScrollSpace > 0 && availableScrollSpace - 10 > scrollTop) {
      scroller.classList.add("at-bottom");
    } else {
      scroller.classList.remove("at-bottom");
    }
  }

  observeContainerAndMeasureHeight() {
    const container = document.querySelector(
      ".product-gallery__media.is-initial"
    );

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          // The container is in the viewport, and the image is likely rendered
          const containerHeight = container.getBoundingClientRect().height;
          this.style.maxHeight = `${containerHeight}px`;
          // You can do additional actions here, like removing the observer
          // if you no longer need it.
          observer.disconnect();
        }
      });
    });
    observer.observe(container);
  }

  handleResize() {
    if (window.innerWidth > 999) {
      this.observeContainerAndMeasureHeight();
      this.scrollEffect();
    }
  }
}

// Create the custom elements
window.customElements.define(
  "product-gallery-navigaion-scroller",
  ProductGalleryScroller
);

class BuyButtonsCustom extends BuyButtons {
  constructor() {
    super();
  }

  addToCartNote() {
    var ptwProdName = $("#ptw-productname").val();
    var ptw_gift_note = $("#ptw-text-message").val();
    var ptwVariantId = ptwSettings.variant_id;

    if (typeof ptw_gift_note != "undefined" && ptw_gift_note != "") {
      var ptwProductProps = {
        "Gift Note": ptw_gift_note,
        "Product Name": ptwProdName,
      };
    } else {
      var ptwProductProps = { "Product Name": ptwProdName };
    }

    var ptwProductParams = {
      type: "POST",

      url: "/cart/add.js",

      data: {
        items: [
          {
            quantity: 1,
            id: ptwVariantId,
            properties: ptwProductProps,
          },
        ],
      },

      dataType: "json",

      cache: false,

      async: false,
    };
    $.ajax(ptwProductParams).done(function (data) {
      console.log("Gift Wrap Added");
    });
  }
  connectedCallback() {
    window.addEventListener("pplrAddToCartCompleted", async (e) => {
      if ($("#ptw-gift-needed").is(":checked")) {
        await this.addToCartNote();
      }
    });
  }
}

// Create the custom elements
window.customElements.define("buy-buttons-custom", BuyButtonsCustom);


class KlaviyoFormComponent extends HTMLElement {
  constructor() {
    super();
  }

  connectedCallback() {
    this.form = this.querySelector('.form-klaviyo-newsletter');
    this.form.addEventListener('submit', this.onSubmit.bind(this));
  }

  onSubmit(event) {
    event.preventDefault();
    // Add any additional logic or validation here
    const emailInput = this.form.querySelector('input[name="contact[email]"]').value;

    const url = 'https://a.klaviyo.com/client/subscriptions/?company_id=XVpzfE';

    const data = {
      data: {
        type: "subscription",
        attributes: {
          list_id: "VC2Fiv",
          email: emailInput,
        }
      }
    };

    fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Revision': '2023-06-15'
      },
      body: JSON.stringify(data)
    })
      .then(data => {
        if(data.ok){
          this.querySelector('form-klaviyo-newsletter .form_on_success').style.display = "block";
          this.querySelector('form-klaviyo-newsletter .fieldset-with-submit').style.display = "none";
          this.querySelector('form-klaviyo-newsletter .fieldset-submit-wrapper').style.display = "none";
        }
        else{
          this.querySelector('form-klaviyo-newsletter .form_on_danger').style.display = "block";
          const submitButton = this.form.querySelector('button[type="submit"]');
          submitButton.setAttribute('aria-busy', 'false');

        }
      })
      .catch(errors => {
        this.querySelector('form-klaviyo-newsletter .form_on_danger').style.display = "block";
        const submitButton = this.form.querySelector('button[type="submit"]');
        submitButton.setAttribute('aria-busy', 'false');
      });
  }
}

customElements.define('form-klaviyo-newsletter', KlaviyoFormComponent);
